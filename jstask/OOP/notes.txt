  * defination *
   Object-Oriented Programming (OOP) in JavaScript is a programming paradigm that organizes code around objects, which are self-contained units combining data (properties) and behavior (methods).
   While JavaScript is primarily a prototype-based language, it offers features and syntax that enable the implementation of OOP concepts.
 
  Key OOP Concepts in JavaScript:
 1> Objects: Fundamental building blocks in JavaScript OOP. They represent real-world entities and encapsulate properties (data) and methods (functions). 
  Objects can be created using object literals, constructor functions, or ES6 classes.
  ex,
  const person = {
        name: "Alice",
        age: 30,
        greet: function() {
            console.log(`Hello, my name is ${this.name}`);
        }
    };

    2> Classes (ES6): Introduced in ES6, classes provide a more familiar syntax for creating objects and implementing OOP principles, resembling class-based languages. 
    They are essentially syntactic sugar over JavaScript's existing prototype-based inheritance.
    ex,
     class Person {
        constructor(name, age) {
            this.name = name;
            this.age = age;
        }

        greet() {
            console.log(`Hello, my name is ${this.name}`);
        }
    }

    const alice = new Person("Alice", 30);

  3> Inheritance: Allows objects to inherit properties and methods from other objects. 
  In JavaScript, this is primarily achieved through prototypal inheritance (linking objects to a prototype chain) and with the extends keyword for classes.
  ex,
   class Employee extends Person {
        constructor(name, age, position) {
            super(name, age); // Calls the parent class constructor
            this.position = position;
        }

        work() {
            console.log(`${this.name} is working as a ${this.position}`);
        }
    }

    4> Encapsulation:
    The bundling of data and methods that operate on the data within a single unit (an object), restricting direct access to some of an object's components. 
    In JavaScript, this can be achieved through closures or conventions like using _ prefixes for private-like properties.

   5> Polymorphism:
   The ability of objects of different classes to respond to the same method call in a way specific to their own class. 
   In JavaScript, this is naturally supported through prototypal inheritance and method overriding.