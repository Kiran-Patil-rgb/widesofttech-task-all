 *array*

  defination: in JavaScript, an array is a single variable used to store an ordered collection of multiple values.
  These values, known as elements, are stored at specific numeric positions called indexes, with the first element located at index 0, the second at index 1, and so on.
 * Key characteristics of JavaScript arrays include:
  1> Ordered Collection:
  Elements maintain their insertion order, which is crucial for accessing them by their index.

  2> Dynamic Size:
   Unlike arrays in some other programming languages, JavaScript arrays can grow or shrink in size as elements are added or removed.

   3> Heterogeneous Data Types:
   A single JavaScript array can hold elements of different data types, such as numbers, strings, booleans, objects, or even other arrays.

   4> Object Type:
  Although they behave like ordered lists, arrays in JavaScript are technically a special type of object.
   
  5> Methods and Properties:
   Arrays come with built-in methods (e.g., push(), pop(), shift(), unshift(), splice(), map(), filter(), sort()) and properties (e.g., length) for efficient manipulation and access.
   1> push(): Adds one or more elements to the end of an array and returns the new length.
   ex,
    let fruits = ['apple', 'banana'];
    fruits.push('orange'); // fruits is now ['apple', 'banana', 'orange']

    2> pop(): Removes the last element from an array and returns that element.
    ex,
    let fruits = ['apple', 'banana', 'orange'];
    let lastFruit = fruits.pop(); // lastFruit is 'orange', fruits is now ['apple', 'banana']

    3> shift(): Removes the first element from an array and returns that element.
    ex,
    let fruits = ['apple', 'banana', 'orange'];
    let firstFruit = fruits.shift(); // firstFruit is 'apple', fruits is now ['banana', 'orange']

    4> unshift(): Adds one or more elements to the beginning of an array and returns the new length.
    ex,
    let fruits = ['banana', 'orange'];
    fruits.unshift('apple'); // fruits is now ['apple', 'banana', 'orange']

    5> splice(): Changes the contents of an array by removing or replacing existing elements and/or adding new elements in place.
    ex,
     let colors = ['red', 'green', 'blue', 'yellow'];
    colors.splice(1, 2, 'purple', 'pink'); // colors is now ['red', 'purple', 'pink', 'yellow']

    6> sort():Sorts the elements of an array in place and returns the sorted array
    ex,
    let numbers = [3, 1, 4, 1, 5];
    numbers.sort(); // numbers is now [1, 1, 3, 4, 5]

    * acessor methods(Return new arrays or values, do not modify the original array):
   1> concat(): Used to merge two or more arrays. Returns a new array.
    ex,let arr1 = [1, 2];
    let arr2 = [3, 4];
    let newArr = arr1.concat(arr2); // newArr is [1, 2, 3, 4]

    2> slice(): Returns a shallow copy of a portion of an array into a new array object.
    ex,
    let numbers = [1, 2, 3, 4, 5];
    let sliced = numbers.slice(1, 4); // sliced is [2, 3, 4]
    . indexOf() / lastIndexOf():
     Returns the first/last index at which a given element can be found in the array, or -1 if it is not present.

    .includes():
    Determines whether an array includes a certain value among its entries, returning true or false.
    
  3>Iteration Methods (Iterate over array elements):
    1> forEach(): Executes a provided function once for each array element.
    ex,
     let numbers = [1, 2, 3];
    numbers.forEach(num => console.log(num * 2)); // Outputs 2, 4, 6

    2> map(): Creates a new array populated with the results of calling a provided function on every element in the calling array. 
    ex,
     let numbers = [1, 2, 3];
    let doubled = numbers.map(num => num * 2); // doubled is [2, 4, 6]

    3> filter(): Creates a new array with all elements that pass the test implemented by the provided function.
    ex,
     let numbers = [1, 2, 3, 4, 5];
     let evens = numbers.filter(num => num % 2 === 0); // evens is [2, 4]

    .reduce() / reduceRight():
     Executes a reducer function on each element of the array, resulting in a single output value.

    .find() / findIndex():
     Returns the value/index of the first element in the array that satisfies the provided testing function.

    .some() / every():
     Tests whether at least one/all elements in the array pass the test implemented by the provided function. 




