 *OPERRATERS*
In JavaScript, operators are symbols or keywords that perform operations on one or more values (operands) and return a result. 
They are fundamental to building expressions and controlling program flow.
 
 Here are the main types of operators in JavaScript:
 * Arithmetic Operators:
 Used for mathematical calculations.
 1> + (Addition)
 2> - (Subtraction)
 3> * (Multiplication) 
 4> / (Division)
 5> % (Modulus - returns the remainder of a division)
 

 *Assignment Operators:
 Used to assign values to variables.
 1> = (Simple assignment)
 2> +=, -=, *=, /=, %=, **= (Compound assignment operators, e.g., x += y is equivalent to x = x + y)

 *Comparison Operators:
Used to compare two values and return a boolean result (true or false).
 1>== (Loose equality - compares values after type coercion)
 2>=== (Strict equality - compares values and types without type coercion)
 3>!= (Loose inequality)
 4>!== (Strict inequality)
 5> > (Greater than)
 6> < (Less than)
 7> >= (Greater than or equal to)
 8> <= (Less than or equal to)

 *Logical Operators:
Used to combine or negate boolean expressions.
 1> && (Logical AND)
 2> || (Logical OR)
 3> ! (Logical NOT)

 *String Operators:
Primarily the + operator for concatenation.
 1> + (Concatenation - joins strings together)

 *Ternary (Conditional) Operator:
A shorthand for an if-else statement.
 1> condition ? expression1 : expression2 (If condition is true, expression1 is evaluated; otherwise, expression2 is evaluated.)

 *Type Operators:
 1> typeof (Returns the data type of an operand as a string)
 2> instanceof (Checks if an object is an instance of a particular class or constructor)

  * Increment Operator (++)
Purpose: Increases the value of a variable by 1.
 1> Prefix form (++variable): The variable is incremented first, and then its new value is returned.
  ex,
  let x = 5;
    let y = ++x; // x becomes 6, y is 6
    console.log(`x: ${x}, y: ${y}`); // Output: x: 6, y: 6

   2> Postfix form (variable++): The current value of the variable is returned first, and then the variable is incremented.
  ex,
    let a = 5;
    let b = a++; // a is still 5 when assigned to b, then a becomes 6
    console.log(`a: ${a}, b: ${b}`); // Output: a: 6, b: 5

   * Decrement Operator (--)
Purpose: Decreases the value of a variable by 1.
 1> Prefix form (--variable): The variable is decremented first, and then its new value is returned.
  ex,
  let p = 10;
    let q = --p; // p becomes 9, q is 9
    console.log(`p: ${p}, q: ${q}`); // Output: p: 9, q: 9

    2> Postfix form (variable--): The current value of the variable is returned first, and then the variable is decremented.
    ex,
    let r = 10;
    let s = r--; // r is still 10 when assigned to s, then r becomes 9
    console.log(`r: ${r}, s: ${s}`); // Output: r: 9, s: 10
    
    * DIFFRENCE BETWEEN STATEMENT AND EXPRESSION *

    STATEMENT: A statement is a command or instruction that performs an action.
     Unlike expressions, statements do not necessarily produce a value that can be directly used elsewhere. 
     They are typically used to control the flow of execution, declare variables, or perform side effects (like modifying data or interacting with the environment).

     // Examples of statements
    let x = 10; // Declares a variable and assigns a value
    if (condition) {
        // ... code to execute if condition is true
    } // Controls program flow
    console.log("Hello"); // Performs a side effect (prints to console)
    for (let i = 0; i < 5; i++) {
        // ... loop body
    } // Controls program flow

     EXPRESSION : An expression is a piece of code that evaluates to a single value.
      This value can then be used in other parts of the program, 
      such as being assigned to a variable, passed as an argument to a function, or used in a calculation.

      // Examples of expressions
    5; // Evaluates to the number 5
    "hello"; // Evaluates to the string "hello"
    x + y; // Evaluates to the sum of x and y
    myFunction(); // Evaluates to the return value of myFunction


